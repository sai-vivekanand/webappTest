name: Create GCP Image

on:
  push:
    branches: [main]

env:
  DB_HOSTNAME: ${{ secrets.DB_HOSTNAME }}
  DB_USERNAME: ${{ secrets.DB_USERNAME }}
  DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
  PROJECT_ID: csye6225csye
  INSTANCE_GROUP_NAME: webapp-group-manager
  REGION: us-east1
  MACHINE_TYPE: e2-medium
  SOURCE_IMAGE_FAMILY: centos-stream-8
  SSH_USERNAME: gcpImageUser
  IMAGE_FAMILY: java-app-fam
  ZONE: us-east1-c
  NETWORK: ${{ secrets.WEBAPP_NET }}
  SUBNET: ${{ secrets.WEBAPP_SUBNET }}
  LABELS: environment=dev,team=cloud
  TAGS: webapp-server
  SCOPES: https://www.googleapis.com/auth/sqlservice.admin,https://www.googleapis.com/auth/cloud-platform

jobs:
  build_gcp_image:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout the repository
      uses: actions/checkout@v2

    - name: Set up JDK 17
      uses: actions/setup-java@v2
      with:
        java-version: '17'
        distribution: 'adopt'

    - name: Build with Maven
      run: mvn clean package -DskipTests

    - name: Set up Google Cloud SDK
      uses: google-github-actions/setup-gcloud@v0.2.0
      with:
        service_account_key: ${{ secrets.CSYE6225CSYE }}
        project_id: ${{ env.PROJECT_ID }}
        export_default_credentials: true

    - name: Create Timestamp
      id: create_timestamp
      run: |
        TIMESTAMP=$(date +%s)
        echo "Timestamp: $TIMESTAMP"
        echo "::set-output name=TIMESTAMP::$TIMESTAMP"

    - name: Create Image Family Name
      id: create_image_family
      run: |
        IMAGE_FAMILY="java-app-fam"
        echo "Image Family Name: $IMAGE_FAMILY"
        echo "::set-output name=IMAGE_FAMILY::$IMAGE_FAMILY"

    - name: Create Image Name
      run: |
        IMAGE_NAME="gcp-${GITHUB_SHA::8}-$(date +%s)"
        echo "IMAGE_NAME=$IMAGE_NAME" >> $GITHUB_ENV

    - name: Build machine image with Packer
      id: image_build
      run: |
        cd packer
        packer init .
        packer build -var 'artifact_path=${{ github.workspace }}/target/cloud-app-0.0.1-SNAPSHOT.jar' -var 'project_id=${{ env.PROJECT_ID }}' -var 'zone=${{ env.ZONE }}' cent.pkr.hcl | tee packer_build.log
        IMAGE_NAME=$(grep 'A disk image was created in' packer_build.log | awk '{print $8}')
        echo "IMAGE_NAME=$IMAGE_NAME" >> $GITHUB_ENV

    - name: Create new Instance Template
      id: create_instance_template
      run: |
          echo "Image created is: ${{steps.image_build.outputs.image_name}}"
          gcloud compute instance-templates create ${{secrets.NEW_TEMPLATE_NAME}} \
          --project=${{env.PROJECT_ID}} \
          --instance-template-region=${{env.REGION}} \          
          --network=${{env.NETWORK}} \
          --subnet=${{env.SUBNET}} \
          --boot-disk-type=pd-ssd \
          --boot-disk-size=100 \
          --boot-disk-auto-delete=true \
          --tags=${{env.TAGS}} \
          --region=${{env.REGION}} \
          --machine-type=${{env.MACHINE_TYPE}} \
          --image=projects/${{env.PROJECT_ID}}/global/images/${{steps.image_build.outputs.image_name}} \
          --description='new template creation' \
          --boot-disk-kms-key=${{secrets.KMS_KEY_SELF_LINK}} \
          --metadata='startup-script= <<-EOF
              #!/bin/bash

              set -e

              DB_HOSTNAME=${{env.DB_HOSTNAME}}
              DB_PASSWORD=${{env.DB_PASSWORD}}

              cat > /opt/.env <<EOF2
              DB_HOSTNAME=${{env.DB_HOSTNAME}}
              DB_USERNAME=webapp
              DB_PASSWORD=${{env.DB_PASSWORD}}
              EOF2

              touch /var/run/startup-script-completed
              EOF' \
          --service-account=${{secrets.GCP_SERVICE_ACCOUNT_EMAIL}} \
          --scopes=${{env.SCOPES}}
          
      
          echo "Initialised New Instance Template Variables" 

    - name: Update Managed Instance Group
      id: update_managed_instance_group
      run: |
          gcloud compute instance-groups managed rolling-action start-update ${{env.INSTANCE_GROUP_NAME}} \
          --version=template=https://compute.googleapis.com/compute/v1/projects/csye6225csye/global/instanceTemplates/${{secrets.NEW_TEMPLATE_NAME}} \
          --region=${{env.REGION}}
    - name: Wait for Managed Instance Group update
      id: wait_until_managed_instance_group_is_stable
      run: |
          gcloud compute instance-groups managed wait-until ${{env.INSTANCE_GROUP_NAME}} \
          --version-target-reached \
          --region=${{env.REGION}}
          echo "Managed Instance group is stable"
